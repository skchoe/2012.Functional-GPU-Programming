Fullyexpandedstx:
(#%plain-module-begin 
 (define-values (threadIdx/x1) '#f) 
 (define-values () (begin (quote-syntax (require/typed-internal threadIdx/x (-> Integer))) (#%plain-app values))) 
 (#%require (just-meta 0 (rename ../typed-utils/cuda-vars.rkt threadIdx/x threadIdx/x)) (only ../typed-utils/cuda-vars.rkt)) 
 (define-values (lifted.2) (#%app apply-contract generated-contract6 threadIdx/x blame3 (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'threadIdx/x4 (#%app make-srcloc '<collects>/suda/ts2c/typed-utils/cuda-vars.rkt '17 '9 '293 '11)))
 (define-values (threadIdx/x) (#%app apply-contract threadIdx/x1 (#%top . lifted.2) '(interface for threadIdx/x) (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'threadIdx/x (#%app make-srcloc '<collects>/suda/ts2c/ex/face_normal_kernel.rkt '3 '16 '74 '11)))
 (define-values (threadIdx/y2) '#f) 
 (define-values () (begin (quote-syntax (require/typed-internal threadIdx/y (-> Integer))) (#%plain-app values)))
 (#%require (just-meta 0 (rename ../typed-utils/cuda-vars.rkt threadIdx/y threadIdx/y)) (only ../typed-utils/cuda-vars.rkt)) 
 (define-values (lifted.6) (#%app apply-contract generated-contract9 threadIdx/y blame3 (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'threadIdx/y7 (#%app make-srcloc '<collects>/suda/ts2c/typed-utils/cuda-vars.rkt '21 '9 '350 '11)))
 (define-values (threadIdx/y) (#%app apply-contract threadIdx/y2 (#%top . lifted.6) '(interface for threadIdx/y) (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'threadIdx/y (#%app make-srcloc '<collects>/suda/ts2c/ex/face_normal_kernel.rkt '3 '43 '101 '11))) 
 (define-values (threadIdx/z3) '#f) 
 (define-values () (begin (quote-syntax (require/typed-internal threadIdx/z (-> Integer))) (#%plain-app values)))
 (#%require (just-meta 0 (rename ../typed-utils/cuda-vars.rkt threadIdx/z threadIdx/z)) (only ../typed-utils/cuda-vars.rkt))
 (define-values (lifted.10) (#%app apply-contract generated-contract12 threadIdx/z blame3 (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'threadIdx/z10 (#%app make-srcloc '<collects>/suda/ts2c/typed-utils/cuda-vars.rkt '25 '9 '407 '11)))
 (define-values (threadIdx/z) (#%app apply-contract threadIdx/z3 (#%top . lifted.10) '(interface for threadIdx/z) (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'threadIdx/z (#%app make-srcloc '<collects>/suda/ts2c/ex/face_normal_kernel.rkt '3 '70 '128 '11)))
 (define-values (blockDim/x4) '#f) 
 (define-values () (begin (quote-syntax (require/typed-internal blockDim/x (-> Integer))) (#%plain-app values)))
 (#%require (just-meta 0 (rename ../typed-utils/cuda-vars.rkt blockDim/x blockDim/x)) (only ../typed-utils/cuda-vars.rkt)) 
 (define-values (lifted.14) (#%app apply-contract generated-contract15 blockDim/x blame3 (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'blockDim/x13 (#%app make-srcloc '<collects>/suda/ts2c/typed-utils/cuda-vars.rkt '29 '9 '463 '10))) 
 (define-values (blockDim/x) (#%app apply-contract blockDim/x4 (#%top . lifted.14) '(interface for blockDim/x) (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'blockDim/x (#%app make-srcloc '<collects>/suda/ts2c/ex/face_normal_kernel.rkt '4 '16 '170 '10))) 
 (define-values (blockDim/y5) '#f)
 (define-values () (begin (quote-syntax (require/typed-internal blockDim/y (-> Integer))) (#%plain-app values))) 
 (#%require (just-meta 0 (rename ../typed-utils/cuda-vars.rkt blockDim/y blockDim/y)) (only ../typed-utils/cuda-vars.rkt)) 
 (define-values (lifted.18) (#%app apply-contract generated-contract18 blockDim/y blame3 (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'blockDim/y16 (#%app make-srcloc '<collects>/suda/ts2c/typed-utils/cuda-vars.rkt '33 '9 '518 '10)))
 (define-values (blockDim/y) (#%app apply-contract blockDim/y5 (#%top . lifted.18) '(interface for blockDim/y) (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'blockDim/y (#%app make-srcloc '<collects>/suda/ts2c/ex/face_normal_kernel.rkt '4 '42 '196 '10))) 
 (define-values (blockDim/z6) '#f) 
 (define-values () (begin (quote-syntax (require/typed-internal blockDim/z (-> Integer))) (#%plain-app values)))
 (#%require (just-meta 0 (rename ../typed-utils/cuda-vars.rkt blockDim/z blockDim/z)) (only ../typed-utils/cuda-vars.rkt)) 
 (define-values (lifted.22) (#%app apply-contract generated-contract21 blockDim/z blame3 (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'blockDim/z19 (#%app make-srcloc '<collects>/suda/ts2c/typed-utils/cuda-vars.rkt '37 '9 '573 '10)))
 (define-values (blockDim/z) (#%app apply-contract blockDim/z6 (#%top . lifted.22) '(interface for blockDim/z) (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'blockDim/z (#%app make-srcloc '<collects>/suda/ts2c/ex/face_normal_kernel.rkt '4 '68 '222 '10)))
 (define-values (blockIdx/x7) '#f) 
 (define-values () (begin (quote-syntax (require/typed-internal blockIdx/x (-> Integer))) (#%plain-app values))) 
 (#%require (just-meta 0 (rename ../typed-utils/cuda-vars.rkt blockIdx/x blockIdx/x)) (only ../typed-utils/cuda-vars.rkt))
 (define-values (lifted.26) (#%app apply-contract generated-contract24 blockIdx/x blame3 (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'blockIdx/x22 (#%app make-srcloc '<collects>/suda/ts2c/typed-utils/cuda-vars.rkt '41 '9 '628 '10))) 
 (define-values (blockIdx/x) (#%app apply-contract blockIdx/x7 (#%top . lifted.26) '(interface for blockIdx/x) (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'blockIdx/x (#%app make-srcloc '<collects>/suda/ts2c/ex/face_normal_kernel.rkt '5 '16 '263 '10)))
 (define-values (blockIdx/y8) '#f)
 (define-values () (begin (quote-syntax (require/typed-internal blockIdx/y (-> Integer))) (#%plain-app values))) 
 (#%require (just-meta 0 (rename ../typed-utils/cuda-vars.rkt blockIdx/y blockIdx/y)) (only ../typed-utils/cuda-vars.rkt)) 
 (define-values (lifted.30) (#%app apply-contract generated-contract27 blockIdx/y blame3 (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'blockIdx/y25 (#%app make-srcloc '<collects>/suda/ts2c/typed-utils/cuda-vars.rkt '45 '9 '683 '10)))
 (define-values (blockIdx/y) (#%app apply-contract blockIdx/y8 (#%top . lifted.30) '(interface for blockIdx/y) (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'blockIdx/y (#%app make-srcloc '<collects>/suda/ts2c/ex/face_normal_kernel.rkt '5 '42 '289 '10))) 
 (define-values (gridDim/x9) '#f)
 (define-values () (begin (quote-syntax (require/typed-internal gridDim/x (-> Integer))) (#%plain-app values))) 
 (#%require (just-meta 0 (rename ../typed-utils/cuda-vars.rkt gridDim/x gridDim/x)) (only ../typed-utils/cuda-vars.rkt)) 
 (define-values (lifted.34) (#%app apply-contract generated-contract30 gridDim/x blame3 (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'gridDim/x28 (#%app make-srcloc '<collects>/suda/ts2c/typed-utils/cuda-vars.rkt '49 '9 '737 '9))) 
 (define-values (gridDim/x) (#%app apply-contract gridDim/x9 (#%top . lifted.34) '(interface for gridDim/x) (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'gridDim/x (#%app make-srcloc '<collects>/suda/ts2c/ex/face_normal_kernel.rkt '6 '16 '330 '9))) 
 (define-values (gridDim/y10) '#f)
 (define-values () (begin (quote-syntax (require/typed-internal gridDim/y (-> Integer))) (#%plain-app values)))
 (#%require (just-meta 0 (rename ../typed-utils/cuda-vars.rkt gridDim/y gridDim/y)) (only ../typed-utils/cuda-vars.rkt))
 (define-values (lifted.38) (#%app apply-contract generated-contract33 gridDim/y blame3 (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'gridDim/y31 (#%app make-srcloc '<collects>/suda/ts2c/typed-utils/cuda-vars.rkt '53 '9 '790 '9))) 
 (define-values (gridDim/y) (#%app apply-contract gridDim/y10 (#%top . lifted.38) '(interface for gridDim/y) (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'gridDim/y (#%app make-srcloc '<collects>/suda/ts2c/ex/face_normal_kernel.rkt '6 '41 '355 '9)))
 (#%require (just-meta 0 (rename ../typed-utils/cuda-vars.rkt struct:Float3 struct:Float3)) (only ../typed-utils/cuda-vars.rkt)) 
 (define-syntaxes (Float3) (#%app make-struct-info (lambda () (#%app list (quote-syntax struct:Float3) (quote-syntax make-Float3) (quote-syntax Float3?) (#%app reverse (#%app list (quote-syntax Float3-x) (quote-syntax Float3-y) (quote-syntax Float3-z))) (#%app list '#f '#f '#f) '#f))))
 (define-values () (begin (quote-syntax (define-typed-struct-internal Float3 ((x : Float) (y : Float) (z : Float)) #:type-only)) (#%plain-app values)))
 (#%require (just-meta 0 (rename ../typed-utils/cuda-vars.rkt Float3? Float3?)) (only ../typed-utils/cuda-vars.rkt))
 (define-values (lifted.41) (#%app apply-contract generated-contract47 Float3? blame3 (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'Float3?45 (#%app make-srcloc '<collects>/suda/ts2c/typed-utils/cuda-vars.rkt '60 '16 '1005 '6)))
 
 (define-values (Float3?) (#%app apply-contract (letrec-syntaxes+values (((making-a-method115) (convert-renamer #f))) () (letrec-syntaxes+values (((making-a-method1) (values (make-rename-transformer (quote-syntax making-a-method115))))) () (#%app build--> '-> '#f '#f (#%app list any/c/proc) '() '#f (#%app list) '() '() '() (#%app list boolean?) '#f (lambda (wrapper blame chk ctc any/c12 boolean?14) (#%expression (lambda (val) (#%app chk val '#f) (#%app wrapper val (let-values (((rng-checker73596) (#%app values (let-values (((core) (lambda (given-kws given-args rng7359516 rng7359517 new-rest) (let-values (((rng73595) (if rng7359517 rng7359516 unspecified-dom))) (let-values (((rest73594) new-rest)) (if (let-values (((or-part) (#%app pair? rest73594))) (if or-part or-part (#%expression (#%app eq? unspecified-dom rng73595)))) (let-values () (let-values (((num-values) (#%app + (#%app length rest73594) (if (#%app eq? unspecified-dom rng73595) '0 '1)))) (#%app raise-blame-error blame val 'expected ~a value~a, returned ~a value~a '1 ' num-values (if (#%app = num-values '1) ' 's)))) (#%app void)) (#%app boolean?14 rng73595)))))) (case-lambda (() (#%app core null null '#f '#f null)) ((rng7359516 . rest73594) (#%app core null null rng7359516 '#t rest73594))))))) (let-values (((basic-lambda73597) (lambda (dom73593) (#%app call-with-immediate-continuation-mark contract-key (lambda (m) (if (if m (if (#%app = (#%app length m) '1) (#%expression (#%app andmap procedure-closure-contents-eq? m (#%app list boolean?14))) '#f) '#f) (let-values () (#%app values (#%app any/c12 dom73593))) (let-values () (#%app values rng-checker73596 (#%app any/c12 dom73593))))))))) (if (#%app matches-arity-exactly? val '1 null null) basic-lambda73597 (let-values (((vr va) (#%app procedure-keywords val)) ((basic-checker73599) (lambda args (if (#%app = (#%app length args) '1) (#%app void) (let-values () (#%app raise-blame-error blame val 'received ~a argument~a, expected ~a (#%app length args) (if (#%app = (#%app length args) '1) ' 's) '1 non-keyword argument))) (#%app apply basic-lambda73597 args)))) (if (let-values (((or-part) (#%app not va))) (if or-part or-part (let-values (((or-part) (#%app pair? vr))) (if or-part or-part (#%expression (#%app pair? va)))))) (#%app make-keyword-procedure (lambda (kwds kwd-args . args) (#%app raise-blame-error (#%app blame-swap blame) val 'expected no keywords)) basic-checker73599) basic-checker73599))))) impersonator-prop:contracted ctc impersonator-prop:application-mark (#%app cons contract-key (#%app list boolean?14))))))))) (#%top . lifted.41) '(interface for Float3?) (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'Float3? (#%app build-source-location (quote-syntax loc)))) 
 
 (define-values () (begin (quote-syntax (require/typed-internal Float3? (Any -> Boolean : Float3))) (#%plain-app values))) 
 (define-values (make-Float318) '#f)
 (define-values () (begin (quote-syntax (require/typed-internal make-Float3 Float3 #:struct-maker #f)) (#%plain-app values)))
 (#%require (just-meta 0 (rename ../typed-utils/cuda-vars.rkt make-Float3 make-Float3)) (only ../typed-utils/cuda-vars.rkt)) 
 (define-values (lifted.45) (#%app apply-contract generated-contract44 make-Float3 blame3 (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'make-Float342 (#%app make-srcloc '<collects>/suda/ts2c/typed-utils/cuda-vars.rkt '60 '16 '1005 '6)))
 (define-values (make-Float3) (#%app apply-contract make-Float318 (#%top . lifted.45) '(interface for make-Float3) (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'make-Float3 (#%app build-source-location (quote-syntax loc)))) 
 (define-values (Float3-x19) '#f) 
 (define-values () (begin (quote-syntax (require/typed-internal Float3-x (Float3 -> Float))) (#%plain-app values)))
 (#%require (just-meta 0 (rename ../typed-utils/cuda-vars.rkt Float3-x Float3-x)) (only ../typed-utils/cuda-vars.rkt))
 (define-values (lifted.49) (#%app apply-contract generated-contract38 Float3-x blame3 (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'Float3-x36 (#%app make-srcloc '<collects>/suda/ts2c/typed-utils/cuda-vars.rkt '60 '16 '1005 '6))) 
 (define-values (Float3-x) (#%app apply-contract Float3-x19 (#%top . lifted.49) '(interface for Float3-x) (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'Float3-x (#%app build-source-location (quote-syntax loc)))) 
 (define-values (Float3-y20) '#f)
 (define-values () (begin (quote-syntax (require/typed-internal Float3-y (Float3 -> Float))) (#%plain-app values)))
 (#%require (just-meta 0 (rename ../typed-utils/cuda-vars.rkt Float3-y Float3-y)) (only ../typed-utils/cuda-vars.rkt)) 
 (define-values (lifted.53) (#%app apply-contract generated-contract53 Float3-y blame3 (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'Float3-y51 (#%app make-srcloc '<collects>/suda/ts2c/typed-utils/cuda-vars.rkt '60 '16 '1005 '6)))
 (define-values (Float3-y) (#%app apply-contract Float3-y20 (#%top . lifted.53) '(interface for Float3-y) (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'Float3-y (#%app build-source-location (quote-syntax loc))))
 (define-values (Float3-z21) '#f)
 (define-values () (begin (quote-syntax (require/typed-internal Float3-z (Float3 -> Float))) (#%plain-app values))) 
 (#%require (just-meta 0 (rename ../typed-utils/cuda-vars.rkt Float3-z Float3-z)) (only ../typed-utils/cuda-vars.rkt))
 (define-values (lifted.57) (#%app apply-contract generated-contract50 Float3-z blame3 (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'Float3-z48 (#%app make-srcloc '<collects>/suda/ts2c/typed-utils/cuda-vars.rkt '60 '16 '1005 '6))) 
 (define-values (Float3-z) (#%app apply-contract Float3-z21 (#%top . lifted.57) '(interface for Float3-z) (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'Float3-z (#%app build-source-location (quote-syntax loc))))
 (#%require (just-meta 0 (rename ../typed-utils/cuda-vars.rkt struct:Int3 struct:Int3)) (only ../typed-utils/cuda-vars.rkt)) 
 (define-syntaxes (Int3) (#%app make-struct-info (lambda () (#%app list (quote-syntax struct:Int3) (quote-syntax make-Int3) (quote-syntax Int3?) (#%app reverse (#%app list (quote-syntax Int3-x) (quote-syntax Int3-y) (quote-syntax Int3-z))) (#%app list '#f '#f '#f) '#f))))
 (define-values () (begin (quote-syntax (define-typed-struct-internal Int3 ((x : Integer) (y : Integer) (z : Integer)) #:type-only)) (#%plain-app values)))
 (#%require (just-meta 0 (rename ../typed-utils/cuda-vars.rkt Int3? Int3?)) (only ../typed-utils/cuda-vars.rkt))
 (define-values (lifted.60) (#%app apply-contract generated-contract72 Int3? blame3 (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'Int3?70 (#%app make-srcloc '<collects>/suda/ts2c/typed-utils/cuda-vars.rkt '61 '16 '1067 '4))) 
 
 (define-values (Int3?) (#%app apply-contract (letrec-syntaxes+values (((making-a-method126) (convert-renamer #f))) () (letrec-syntaxes+values (((making-a-method1) (values (make-rename-transformer (quote-syntax making-a-method126))))) () (#%app build--> '-> '#f '#f (#%app list any/c/proc) '() '#f (#%app list) '() '() '() (#%app list boolean?) '#f (lambda (wrapper blame chk ctc any/c23 boolean?25) (#%expression (lambda (val) (#%app chk val '#f) (#%app wrapper val (let-values (((rng-checker73605) (#%app values (let-values (((core) (lambda (given-kws given-args rng7360427 rng7360428 new-rest) (let-values (((rng73604) (if rng7360428 rng7360427 unspecified-dom))) (let-values (((rest73603) new-rest)) (if (let-values (((or-part) (#%app pair? rest73603))) (if or-part or-part (#%expression (#%app eq? unspecified-dom rng73604)))) (let-values () (let-values (((num-values) (#%app + (#%app length rest73603) (if (#%app eq? unspecified-dom rng73604) '0 '1)))) (#%app raise-blame-error blame val 'expected ~a value~a, returned ~a value~a '1 ' num-values (if (#%app = num-values '1) ' 's)))) (#%app void)) (#%app boolean?25 rng73604)))))) (case-lambda (() (#%app core null null '#f '#f null)) ((rng7360427 . rest73603) (#%app core null null rng7360427 '#t rest73603))))))) (let-values (((basic-lambda73606) (lambda (dom73602) (#%app call-with-immediate-continuation-mark contract-key (lambda (m) (if (if m (if (#%app = (#%app length m) '1) (#%expression (#%app andmap procedure-closure-contents-eq? m (#%app list boolean?25))) '#f) '#f) (let-values () (#%app values (#%app any/c23 dom73602))) (let-values () (#%app values rng-checker73605 (#%app any/c23 dom73602))))))))) (if (#%app matches-arity-exactly? val '1 null null) basic-lambda73606 (let-values (((vr va) (#%app procedure-keywords val)) ((basic-checker73608) (lambda args (if (#%app = (#%app length args) '1) (#%app void) (let-values () (#%app raise-blame-error blame val 'received ~a argument~a, expected ~a (#%app length args) (if (#%app = (#%app length args) '1) ' 's) '1 non-keyword argument))) (#%app apply basic-lambda73606 args)))) (if (let-values (((or-part) (#%app not va))) (if or-part or-part (let-values (((or-part) (#%app pair? vr))) (if or-part or-part (#%expression (#%app pair? va)))))) (#%app make-keyword-procedure (lambda (kwds kwd-args . args) (#%app raise-blame-error (#%app blame-swap blame) val 'expected no keywords)) basic-checker73608) basic-checker73608))))) impersonator-prop:contracted ctc impersonator-prop:application-mark (#%app cons contract-key (#%app list boolean?25))))))))) (#%top . lifted.60) '(interface for Int3?) (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'Int3? (#%app build-source-location (quote-syntax loc))))
 
 (define-values () (begin (quote-syntax (require/typed-internal Int3? (Any -> Boolean : Int3))) (#%plain-app values)))
 (define-values (make-Int329) '#f) 
 (define-values () (begin (quote-syntax (require/typed-internal make-Int3 Int3 #:struct-maker #f)) (#%plain-app values))) 
 (#%require (just-meta 0 (rename ../typed-utils/cuda-vars.rkt make-Int3 make-Int3)) (only ../typed-utils/cuda-vars.rkt))
 (define-values (lifted.64) (#%app apply-contract generated-contract69 make-Int3 blame3 (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'make-Int367 (#%app make-srcloc '<collects>/suda/ts2c/typed-utils/cuda-vars.rkt '61 '16 '1067 '4))) 
 (define-values (make-Int3) (#%app apply-contract make-Int329 (#%top . lifted.64) '(interface for make-Int3) (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'make-Int3 (#%app build-source-location (quote-syntax loc))))
 (define-values (Int3-x30) '#f)
 (define-values () (begin (quote-syntax (require/typed-internal Int3-x (Int3 -> Integer))) (#%plain-app values))) 
 (#%require (just-meta 0 (rename ../typed-utils/cuda-vars.rkt Int3-x Int3-x)) (only ../typed-utils/cuda-vars.rkt))
 (define-values (lifted.68) (#%app apply-contract generated-contract63 Int3-x blame3 (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'Int3-x61 (#%app make-srcloc '<collects>/suda/ts2c/typed-utils/cuda-vars.rkt '61 '16 '1067 '4)))
 (define-values (Int3-x) (#%app apply-contract Int3-x30 (#%top . lifted.68) '(interface for Int3-x) (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'Int3-x (#%app build-source-location (quote-syntax loc))))
 (define-values (Int3-y31) '#f) 
 (define-values () (begin (quote-syntax (require/typed-internal Int3-y (Int3 -> Integer))) (#%plain-app values))) 
 (#%require (just-meta 0 (rename ../typed-utils/cuda-vars.rkt Int3-y Int3-y)) (only ../typed-utils/cuda-vars.rkt))
 (define-values (lifted.72) (#%app apply-contract generated-contract78 Int3-y blame3 (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'Int3-y76 (#%app make-srcloc '<collects>/suda/ts2c/typed-utils/cuda-vars.rkt '61 '16 '1067 '4)))
 (define-values (Int3-y) (#%app apply-contract Int3-y31 (#%top . lifted.72) '(interface for Int3-y) (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'Int3-y (#%app build-source-location (quote-syntax loc))))
 (define-values (Int3-z32) '#f)
 (define-values () (begin (quote-syntax (require/typed-internal Int3-z (Int3 -> Integer))) (#%plain-app values)))
 (#%require (just-meta 0 (rename ../typed-utils/cuda-vars.rkt Int3-z Int3-z)) (only ../typed-utils/cuda-vars.rkt))
 (define-values (lifted.76) (#%app apply-contract generated-contract75 Int3-z blame3 (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'Int3-z73 (#%app make-srcloc '<collects>/suda/ts2c/typed-utils/cuda-vars.rkt '61 '16 '1067 '4)))
 (define-values (Int3-z) (#%app apply-contract Int3-z32 (#%top . lifted.76) '(interface for Int3-z) (#%app module-source->module-path (#%app variable-reference->module-source (#%variable-reference))) 'Int3-z (#%app build-source-location (quote-syntax loc))))
 
 (define-values () (begin (quote-syntax (:-internal face_normal_kernel ((Vectorof Float3) Integer (Vectorof Int3) Integer (Vectorof Float3) -> Void))) (#%plain-app values)))
 
 (define-values (face_normal_kernel) (lambda (lst-points num_points lst_face_pt_indices num_faces vec_face_normals) (let-values (((block_index_1d) (#%app + (#%app blockIdx/x) (#%app * (#%app blockIdx/y) (#%app gridDim/x))))) (let-values (((idx) (#%app + (#%app threadIdx/x) (#%app * (#%app blockDim/x) block_index_1d)))) (if (#%app < idx num_faces) (let-values () (let-values (((ptidx) (#%app vector-ref lst_face_pt_indices idx))) (let-values (((pt0) (#%app vector-ref lst-points (#%app Int3-x ptidx)))) (let-values (((pt1) (#%app vector-ref lst-points (#%app Int3-y ptidx)))) (let-values (((pt2) (#%app vector-ref lst-points (#%app Int3-z ptidx)))) (let-values (((edge0) (#%app make-Float3 (#%app - (#%app Float3-x pt1) (#%app Float3-x pt0)) (#%app - (#%app Float3-y pt1) (#%app Float3-y pt0)) (#%app - (#%app Float3-z pt1) (#%app Float3-z pt0))))) (let-values (((edge1) (#%app make-Float3 (#%app - (#%app Float3-x pt2) (#%app Float3-x pt0)) (#%app - (#%app Float3-y pt2) (#%app Float3-y pt0)) (#%app - (#%app Float3-z pt2) (#%app Float3-z pt0))))) (let-values (((cross-x) (#%app - (#%app * (#%app Float3-y edge0) (#%app Float3-z edge1)) (#%app Float3-z edge0) (#%app Float3-y edge1)))) (let-values (((cross-y) (#%app - (#%app * (#%app Float3-z edge0) (#%app Float3-x edge1)) (#%app Float3-x edge0) (#%app Float3-z edge1)))) (let-values (((cross-z) (#%app - (#%app * (#%app Float3-x edge0) (#%app Float3-y edge1)) (#%app Float3-y edge0) (#%app Float3-x edge1)))) (let-values (((cross) (#%app make-Float3 cross-x cross-y cross-z))) (#%app vector-set! vec_face_normals idx cross)))))))))))) (#%app void)))))))


-------------------------------------------------------------------------------------------------------------
new-mod:
(begin (begin) (begin-for-syntax (register-type #'Int3-z (make-Function `(,(make-arr `(,(make-Name (quote-syntax Int3))) (make-Values `(,(make-Result (make-Union (sort (list (make-Value 0) (make-Value 1) -Byte>1 -PosIndexNotByte -PosFixnumNotIndex -NegFixnum -PosIntNotFixnum -NegIntNotFixnum) < #:key Type-seq)) (make-FilterSet (make-Top) (make-Top)) (make-Empty)))) #f #f `())))) (register-type #'Int3-y (make-Function `(,(make-arr `(,(make-Name (quote-syntax Int3))) (make-Values `(,(make-Result (make-Union (sort (list (make-Value 0) (make-Value 1) -Byte>1 -PosIndexNotByte -PosFixnumNotIndex -NegFixnum -PosIntNotFixnum -NegIntNotFixnum) < #:key Type-seq)) (make-FilterSet (make-Top) (make-Top)) (make-Empty)))) #f #f `())))) (register-type #'Int3? (make-Function `(,(make-arr `(,(make-Univ)) (make-Values `(,(make-Result -Boolean (make-FilterSet (make-TypeFilter (make-Name (quote-syntax Int3)) `() 0) (make-NotTypeFilter (make-Name (quote-syntax Int3)) `() 0)) (make-Empty)))) #f #f `())))) (register-type #'make-Int3 (make-Function `(,(make-arr `(,(make-Union (sort (list (make-Value 0) (make-Value 1) -Byte>1 -PosIndexNotByte -PosFixnumNotIndex -NegFixnum -PosIntNotFixnum -NegIntNotFixnum) < #:key Type-seq)) ,(make-Union (sort (list (make-Value 0) (make-Value 1) -Byte>1 -PosIndexNotByte -PosFixnumNotIndex -NegFixnum -PosIntNotFixnum -NegIntNotFixnum) < #:key Type-seq)) ,(make-Union (sort (list (make-Value 0) (make-Value 1) -Byte>1 -PosIndexNotByte -PosFixnumNotIndex -NegFixnum -PosIntNotFixnum -NegIntNotFixnum) < #:key Type-seq))) (make-Values `(,(make-Result (make-Name (quote-syntax Int3)) (make-FilterSet (make-Top) (make-Top)) (make-Empty)))) #f #f `())))) (register-type #'Int3-x (make-Function `(,(make-arr `(,(make-Name (quote-syntax Int3))) (make-Values `(,(make-Result (make-Union (sort (list (make-Value 0) (make-Value 1) -Byte>1 -PosIndexNotByte -PosFixnumNotIndex -NegFixnum -PosIntNotFixnum -NegIntNotFixnum) < #:key Type-seq)) (make-FilterSet (make-Top) (make-Top)) (make-Empty)))) #f #f `())))) (register-type #'Float3-z (make-Function `(,(make-arr `(,(make-Name (quote-syntax Float3))) (make-Values `(,(make-Result (make-Union (sort (list -FlonumPosZero -FlonumNegZero -FlonumNan -PosFlonum -NegFlonum) < #:key Type-seq)) (make-FilterSet (make-Top) (make-Top)) (make-Empty)))) #f #f `())))) (register-type #'Float3-y (make-Function `(,(make-arr `(,(make-Name (quote-syntax Float3))) (make-Values `(,(make-Result (make-Union (sort (list -FlonumPosZero -FlonumNegZero -FlonumNan -PosFlonum -NegFlonum) < #:key Type-seq)) (make-FilterSet (make-Top) (make-Top)) (make-Empty)))) #f #f `())))) (register-type #'Float3? (make-Function `(,(make-arr `(,(make-Univ)) (make-Values `(,(make-Result -Boolean (make-FilterSet (make-TypeFilter (make-Name (quote-syntax Float3)) `() 0) (make-NotTypeFilter (make-Name (quote-syntax Float3)) `() 0)) (make-Empty)))) #f #f `())))) (register-type #'make-Float3 (make-Function `(,(make-arr `(,(make-Union (sort (list -FlonumPosZero -FlonumNegZero -FlonumNan -PosFlonum -NegFlonum) < #:key Type-seq)) ,(make-Union (sort (list -FlonumPosZero -FlonumNegZero -FlonumNan -PosFlonum -NegFlonum) < #:key Type-seq)) ,(make-Union (sort (list -FlonumPosZero -FlonumNegZero -FlonumNan -PosFlonum -NegFlonum) < #:key Type-seq))) (make-Values `(,(make-Result (make-Name (quote-syntax Float3)) (make-FilterSet (make-Top) (make-Top)) (make-Empty)))) #f #f `())))) (register-type #'Float3-x (make-Function `(,(make-arr `(,(make-Name (quote-syntax Float3))) (make-Values `(,(make-Result (make-Union (sort (list -FlonumPosZero -FlonumNegZero -FlonumNan -PosFlonum -NegFlonum) < #:key Type-seq)) (make-FilterSet (make-Top) (make-Top)) (make-Empty)))) #f #f `())))) (register-type #'blockIdx/y (make-Function `(,(make-arr `() (make-Values `(,(make-Result (make-Union (sort (list (make-Value 0) (make-Value 1) -Byte>1 -PosIndexNotByte -PosFixnumNotIndex -NegFixnum -PosIntNotFixnum -NegIntNotFixnum) < #:key Type-seq)) (make-FilterSet (make-Top) (make-Top)) (make-Empty)))) #f #f `())))) (register-type #'blockDim/z (make-Function `(,(make-arr `() (make-Values `(,(make-Result (make-Union (sort (list (make-Value 0) (make-Value 1) -Byte>1 -PosIndexNotByte -PosFixnumNotIndex -NegFixnum -PosIntNotFixnum -NegIntNotFixnum) < #:key Type-seq)) (make-FilterSet (make-Top) (make-Top)) (make-Empty)))) #f #f `())))) (register-type #'threadIdx/y (make-Function `(,(make-arr `() (make-Values `(,(make-Result (make-Union (sort (list (make-Value 0) (make-Value 1) -Byte>1 -PosIndexNotByte -PosFixnumNotIndex -NegFixnum -PosIntNotFixnum -NegIntNotFixnum) < #:key Type-seq)) (make-FilterSet (make-Top) (make-Top)) (make-Empty)))) #f #f `())))) (register-type #'face_normal_kernel (make-Function `(,(make-arr `(,(make-Vector (make-Name (quote-syntax Float3))) ,(make-Union (sort (list (make-Value 0) (make-Value 1) -Byte>1 -PosIndexNotByte -PosFixnumNotIndex -NegFixnum -PosIntNotFixnum -NegIntNotFixnum) < #:key Type-seq)) ,(make-Vector (make-Name (quote-syntax Int3))) ,(make-Union (sort (list (make-Value 0) (make-Value 1) -Byte>1 -PosIndexNotByte -PosFixnumNotIndex -NegFixnum -PosIntNotFixnum -NegIntNotFixnum) < #:key Type-seq)) ,(make-Vector (make-Name (quote-syntax Float3)))) (make-Values `(,(make-Result -Void (make-FilterSet (make-Top) (make-Top)) (make-Empty)))) #f #f `())))) (register-type #'gridDim/y (make-Function `(,(make-arr `() (make-Values `(,(make-Result (make-Union (sort (list (make-Value 0) (make-Value 1) -Byte>1 -PosIndexNotByte -PosFixnumNotIndex -NegFixnum -PosIntNotFixnum -NegIntNotFixnum) < #:key Type-seq)) (make-FilterSet (make-Top) (make-Top)) (make-Empty)))) #f #f `())))) (register-type #'gridDim/x (make-Function `(,(make-arr `() (make-Values `(,(make-Result (make-Union (sort (list (make-Value 0) (make-Value 1) -Byte>1 -PosIndexNotByte -PosFixnumNotIndex -NegFixnum -PosIntNotFixnum -NegIntNotFixnum) < #:key Type-seq)) (make-FilterSet (make-Top) (make-Top)) (make-Empty)))) #f #f `())))) (register-type #'blockIdx/x (make-Function `(,(make-arr `() (make-Values `(,(make-Result (make-Union (sort (list (make-Value 0) (make-Value 1) -Byte>1 -PosIndexNotByte -PosFixnumNotIndex -NegFixnum -PosIntNotFixnum -NegIntNotFixnum) < #:key Type-seq)) (make-FilterSet (make-Top) (make-Top)) (make-Empty)))) #f #f `())))) (register-type #'blockDim/y (make-Function `(,(make-arr `() (make-Values `(,(make-Result (make-Union (sort (list (make-Value 0) (make-Value 1) -Byte>1 -PosIndexNotByte -PosFixnumNotIndex -NegFixnum -PosIntNotFixnum -NegIntNotFixnum) < #:key Type-seq)) (make-FilterSet (make-Top) (make-Top)) (make-Empty)))) #f #f `())))) (register-type #'blockDim/x (make-Function `(,(make-arr `() (make-Values `(,(make-Result (make-Union (sort (list (make-Value 0) (make-Value 1) -Byte>1 -PosIndexNotByte -PosFixnumNotIndex -NegFixnum -PosIntNotFixnum -NegIntNotFixnum) < #:key Type-seq)) (make-FilterSet (make-Top) (make-Top)) (make-Empty)))) #f #f `())))) (register-type #'threadIdx/z (make-Function `(,(make-arr `() (make-Values `(,(make-Result (make-Union (sort (list (make-Value 0) (make-Value 1) -Byte>1 -PosIndexNotByte -PosFixnumNotIndex -NegFixnum -PosIntNotFixnum -NegIntNotFixnum) < #:key Type-seq)) (make-FilterSet (make-Top) (make-Top)) (make-Empty)))) #f #f `())))) (register-type #'threadIdx/x (make-Function `(,(make-arr `() (make-Values `(,(make-Result (make-Union (sort (list (make-Value 0) (make-Value 1) -Byte>1 -PosIndexNotByte -PosFixnumNotIndex -NegFixnum -PosIntNotFixnum -NegIntNotFixnum) < #:key Type-seq)) (make-FilterSet (make-Top) (make-Top)) (make-Empty)))) #f #f `()))))) (begin-for-syntax (register-type-name #'Float3 (make-Struct 'Float3 #f `(,(make-fld (make-Union (sort (list -FlonumPosZero -FlonumNegZero -FlonumNan -PosFlonum -NegFlonum) < #:key Type-seq)) (quote-syntax Float3-x) #f) ,(make-fld (make-Union (sort (list -FlonumPosZero -FlonumNegZero -FlonumNan -PosFlonum -NegFlonum) < #:key Type-seq)) (quote-syntax Float3-y) #f) ,(make-fld (make-Union (sort (list -FlonumPosZero -FlonumNegZero -FlonumNan -PosFlonum -NegFlonum) < #:key Type-seq)) (quote-syntax Float3-z) #f)) #f #f (quote-syntax Float3?) (syntax-local-certifier) (quote-syntax make-Float3))) (register-type-name #'Int3 (make-Struct 'Int3 #f `(,(make-fld (make-Union (sort (list (make-Value 0) (make-Value 1) -Byte>1 -PosIndexNotByte -PosFixnumNotIndex -NegFixnum -PosIntNotFixnum -NegIntNotFixnum) < #:key Type-seq)) (quote-syntax Int3-x) #f) ,(make-fld (make-Union (sort (list (make-Value 0) (make-Value 1) -Byte>1 -PosIndexNotByte -PosFixnumNotIndex -NegFixnum -PosIntNotFixnum -NegIntNotFixnum) < #:key Type-seq)) (quote-syntax Int3-y) #f) ,(make-fld (make-Union (sort (list (make-Value 0) (make-Value 1) -Byte>1 -PosIndexNotByte -PosFixnumNotIndex -NegFixnum -PosIntNotFixnum -NegIntNotFixnum) < #:key Type-seq)) (quote-syntax Int3-z) #f)) #f #f (quote-syntax Int3?) (syntax-local-certifier) (quote-syntax make-Int3)))) (begin-for-syntax) (begin-for-syntax (begin)) (begin))